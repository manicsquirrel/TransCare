{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let ProviderFilterComponent = /*#__PURE__*/(() => {\n  class ProviderFilterComponent {\n    constructor() {\n      this.initialValue = '';\n      this.debounceTime = 300;\n      this.textChange = new EventEmitter();\n      this.inputValue = new Subject();\n      this.trigger = this.inputValue.pipe(debounceTime(this.debounceTime), distinctUntilChanged());\n      this.subscriptions = [];\n    }\n\n    ngOnInit() {\n      const subscription = this.trigger.subscribe(currentValue => {\n        this.textChange.emit(currentValue);\n      });\n      this.subscriptions.push(subscription);\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    onInput(e) {\n      this.inputValue.next(e.target.value);\n    }\n\n  }\n\n  ProviderFilterComponent.ɵfac = function ProviderFilterComponent_Factory(t) {\n    return new (t || ProviderFilterComponent)();\n  };\n\n  ProviderFilterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProviderFilterComponent,\n    selectors: [[\"app-provider-filter\"]],\n    inputs: {\n      initialValue: \"initialValue\",\n      debounceTime: \"debounceTime\"\n    },\n    outputs: {\n      textChange: \"textChange\"\n    },\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"col-12\", \"md:col-4\"], [1, \"p-inputgroup\"], [\"type\", \"text\", \"placeholder\", \"Enter your search term...\", 3, \"value\", \"input\"], [\"type\", \"button\", \"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Search\"]],\n    template: function ProviderFilterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"input\", 2);\n        i0.ɵɵlistener(\"input\", function ProviderFilterComponent_Template_input_input_2_listener($event) {\n          return ctx.onInput($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"button\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.initialValue);\n      }\n    },\n    styles: [\"\"]\n  });\n  return ProviderFilterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}